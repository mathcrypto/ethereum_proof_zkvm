    // Execut// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{
    ETHEREUM_PROOF_GUEST_ELF, ETHEREUM_PROOF_GUEST_ID
};
use risc0_zkvm::{default_prover, ExecutorEnv};
use crate::models::BlockHeader;

mod models;

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    // An executor environment describes the configurations for the zkVM
    // including program inputs.
    // A default ExecutorEnv can be created like so:
    // `let env = ExecutorEnv::builder().build().unwrap();`
    // However, this `env` does not have any inputs.
    //
    // To add guest input to the executor environment, use
    // ExecutorEnvBuilder::write().
    // To access this method, you'll need to use ExecutorEnv::builder(), which
    // creates an ExecutorEnvBuilder. When you're done adding input, call

    // Step #1: Create a sample Ethereum block header.
    let block_header = BlockHeader {
        hash: "0x1234567890abcdef".to_string(),
        parent_hash: "0xabcdef1234567890".to_string(),
        timestamp: 1631583200,
        number: 123456,
        transactions_root: "0xabcdefabcdefabcdef".to_string(),
    };




    // Step #2: Write the block header to the executor environment.
    let env = ExecutorEnv::builder()
        .write(&block_header)
        .unwrap()
        .build()
        .unwrap();


    // Obtain the default prover to generate a proof.
    println!("Generating proof for the block header...");

    let prover = default_prover();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let prove_info = prover
        .prove(env, ETHEREUM_PROOF_GUEST_ELF)
        .unwrap();

    // extract the receipt.
    let receipt = prove_info.receipt;

    // TODO: Implement code for retrieving receipt journal here.


    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt
        .verify(ETHEREUM_PROOF_GUEST_ID)
        .unwrap();
}
